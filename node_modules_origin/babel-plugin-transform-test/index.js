
var t= require("babel-types")
var babylon=require("babylon");

module.exports=function(babel){

	return {

		visitor:{

			VariableDeclaration:function(path,state){

				var con=path.node.declarations[0]

				var con_isM=/MAD_PLATFORM_/gi.test(con.id.name);

				var con_isG=/^\/platform/.test(con.init.value);

				con_isM && con_isG && (con.init.value="http://onemad"+con.init.value);

			},
			FunctionDeclaration : function(path,state){
				//path.replaceWith(t.stringLiteral("Because I'm easy come, easy go."))
 				// path.insertBefore();
 				//console.log( path. )
 				//path.insertBefore(t.stringLiteral( "Because I'm easy come, easy go."))
 				//console.log(path.get("name"))
 				//console.log("---------------------")
 				if(!path.old){
					path.old=true
					//var id=t.identifier(path.node.id.name)
					var id=path.node.id;
	 				var params=path.node.params;
	 				var body= path.node.body;
	 				body.body.unshift(babylon.parse(`console.log('fun start  ${path.node.id.name} ${state.opts.title}')`));
	 				body.body.push(babylon.parse(`console.log('fun end ${path.node.id.name}  ${state.opts.title} ')`));
					path.replaceWith(t.functionDeclaration(id,params,body));
 				}
			},

			ExpressionStatement:function(path,state){


			/*	if(path.node.expression.callee.object)	{

					if(	path.node.expression.callee.object.name=="console" && path.node.expression.callee.property.name=="error") {

						path.remove();
					}
				}*/
			},
			Identifier:function(path,state){

				if(path.node.name=='error'){


					path.node.name="dir"
				}
			}
		}
	}
}